# Node.js with React

# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  tag: '$(Build.BuildNumber)'
  repositoryName: 'gpt'

pool:
  vmImage: ubuntu-latest

steps:
  - task: PowerShell@2
    displayName: 'Create Docker image and copy tests results outside container.'
    inputs:
      targetType: 'inline'
      script: |
        docker build . -t gpt-test -f ci-tests.Dockerfile
        docker create --name testcontainer gpt-test 
        docker cp testcontainer:/app/coverage .
        docker cp testcontainer:/app/junit.xml .
        docker cp testcontainer:/app/e2e-junit.xml .
        docker rm testcontainer

  - task: Docker@2
    displayName: '[Main] - Build container to ACR'
    condition: eq(variables.isMain, true)
    inputs:
      containerRegistry: 'ACRGPT'
      repository: $(repositoryName)
      command: 'build'
      Dockerfile: 'Dockerfile'
      tags: $(tag)

  - task: Docker@2
    displayName: '[Main] - Push container to ACR'
    condition: eq(variables.isMain, true)
    inputs:
      containerRegistry: 'ACRGPT'
      repository: $(repositoryName)
      command: 'push'
      tags: $(tag)

  - task: Docker@2
    displayName: '[Main] - Build latest container to ACR'
    condition: eq(variables.isMain, true)
    inputs:
      containerRegistry: 'ACRGPT'
      repository: $(repositoryName)
      command: 'build'
      Dockerfile: 'Dockerfile'
      tags: 'latest'

  - task: Docker@2
    displayName: '[Main] - Push latest container to ACR'
    condition: eq(variables.isMain, true)
    inputs:
      containerRegistry: 'ACRGPT'
      repository: $(repositoryName)
      command: 'push'
      tags: 'latest'
      
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '*junit.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
    displayName: 'Publish test results' 
    
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
